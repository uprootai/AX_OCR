feat: Web UI 및 eDOCr v1/v2 이중 배포 시스템 구축 및 고급 시각화 기능 추가

## 🎯 주요 기능

### 1. Web UI (React + TypeScript)
- 모든 마이크로서비스를 위한 현대적인 디버깅 인터페이스
- 타임라인 시각화를 통한 실시간 요청/응답 모니터링
- 색상 코딩된 주석이 포함된 대화형 OCR 결과 시각화
- 드래그 앤 드롭 지원 PDF/이미지 파일 업로드
- Tailwind CSS를 활용한 반응형 디자인

**추가된 파일:**
- `web-ui/` - 완전한 React 애플리케이션
  - `src/pages/test/TestEdocr2.tsx` - eDOCr v1/v2 테스트 페이지
  - `src/components/debug/` - 재사용 가능한 디버그 컴포넌트
  - `src/lib/api.ts` - 중앙화된 API 클라이언트
  - `src/store/monitoringStore.ts` - Zustand 상태 관리

### 2. eDOCr v1/v2 이중 배포
- **v1**: OpenCV 기반 레거시 OCR이 탑재된 원본 eDOCr
- **v2**: ML 모델 및 고급 처리 기능이 추가된 향상된 버전

**새로 추가된 파일:**
- `edocr2-api/Dockerfile.v1` - v1 컨테이너 설정
- `edocr2-api/Dockerfile.v2` - GPU 지원이 포함된 v2 컨테이너
- `edocr2-api/api_server_edocr_v1.py` - v1 API 서버 (포트 5001)
- `edocr2-api/api_server_edocr_v2.py` - v2 API 서버 (포트 5002)
- `edocr2-api/docker-compose-dual.yml` - 이중 배포 설정
- `edocr2-api/requirements_v1.txt` - v1 의존성
- `edocr2-api/requirements_v2.txt` - v2 의존성 (TensorFlow 2.15.0-gpu 포함)

**주요 차이점:**
- v2는 치수/GD&T 인식을 위해 Keras 모델 사용
- v2는 고급 기호 매칭 및 테이블 추출 기능 포함
- v2는 CUDA 지원이 필요한 GPU(NVIDIA) 필요
- v2는 지름 기호(Ø)를 위한 노르웨이어 언어팩 지원

### 3. 고급 시각화 시스템 🎨

#### 서버 측 시각화 (v2)
- OpenCV 기반 바운딩 박스 렌더링
- **JSON 매핑을 위한 번호 레이블**:
  - 🟢 **D0, D1, D2...** - 치수 (초록색 원)
  - 🔵 **G0, G1, G2...** - GD&T 기호 (파란색 원)
  - 🔴 **T0, T1, T2...** - 텍스트 블록 (빨간색 원)
- 설정 가능한 DPI를 지원하는 고품질 JPEG 출력
- `/api/v2/results/{filename}` 엔드포인트를 통해 접근 가능

**구현 세부 사항:**
- `api_server_edocr_v2.py:387-459` - 시각화 생성 로직
- 바운딩 박스를 위해 `cv2.polylines()` 사용
- 번호 레이블을 위해 `cv2.circle()` + `cv2.putText()` 사용
- 레이블 위치: bbox 좌상단에서 왼쪽으로 25px, 위로 10px

#### UI 시각화 기능
- **이미지 확대 모달** - 클릭하여 전체 화면 오버레이로 확대
- **색상 코딩된 범례** - 주석 유형의 명확한 매핑
- **반응형 이미지 디스플레이** - 컨테이너 너비에 맞게 조절
- **다운로드 지원** - 시각화 파일에 직접 접근 가능

**수정된 파일:**
- `web-ui/src/pages/test/TestEdocr2.tsx:505-609` - 확대 모달 및 표시 로직

### 4. PDF 처리 지원
- PyMuPDF(fitz)를 사용한 자동 PDF to PNG 변환
- 설정 가능한 DPI (기본값: 150)
- 단일 페이지 도면을 위한 첫 페이지 추출
- 종횡비 및 품질 유지

**구현:**
- `gateway-api/api_server.py:121-161` - `pdf_to_image()` 함수
- 기존 EDGNet 세그멘테이션 파이프라인과 통합

### 5. 타입 안정성 개선
- v2 결과 변환에서 list/dict 타입 처리 수정
- dimensions, GD&T, 텍스트 데이터에 대한 `isinstance()` 검사 추가
- list 객체에서 `.get()` AttributeError 방지

**주요 수정 사항:**
- `api_server_edocr_v2.py:52-127` - 타입 가드가 포함된 `transform_v2_result()`
- edocr2 라이브러리의 레거시 dict 형식 및 새로운 list 형식 모두 처리

## 🔧 설정 변경 사항

### Docker Compose 업데이트

**메인 Compose (`docker-compose.yml`):**
- 포트 5173에 `web-ui` 서비스 추가
- 모든 마이크로서비스 URL에 대한 환경 변수 설정
- nginx `/health` 엔드포인트를 통한 헬스 체크

**eDOCr 이중 Compose (`edocr2-api/docker-compose-dual.yml`):**
- v1 컨테이너: CPU 전용, 포트 5001
- v2 컨테이너: GPU 활성화, 포트 5002
- GPU 설정:
  - NVIDIA 디바이스 예약
  - CUDA malloc async allocator
  - XLA JIT 비활성화 (libdevice.10.bc 문제 회피)
  - PTX 컴파일을 위한 드라이버 폴백

### Gateway API 개선
- PyMuPDF(fitz) 및 Pillow 의존성 추가
- 파일 확장자를 기반으로 한 PDF 감지 로직
- OCR 처리 전 투명한 변환

**수정됨:**
- `gateway-api/api_server.py` - pdf_to_image 함수 추가
- `gateway-api/requirements.txt` - PyMuPDF, Pillow 추가

### eDOCr API 업데이트
- 모든 OCR 엔드포인트에 `visualize: bool` 매개변수 추가
- v1 응답에 placeholder 시각화 URL
- OpenCV 렌더링을 통한 v2 완전 구현

**수정됨:**
- `edocr2-api/api_server.py:77,127,257` - visualize 매개변수
- `edocr2-api/docker-compose.yml` - 서비스 설정 업데이트

## 📚 문서

### 기술 문서
- `EDOCR_V1_V2_DEPLOYMENT.md` - 이중 eDOCr 설정을 위한 배포 가이드
- `docs/opensource/` - 오픈소스 모델 분석 및 솔루션
  - `MODEL_DOWNLOAD_INFO.md` - Hugging Face 모델 다운로드 지침
  - `SOLUTION.md` - 구현 접근 방식 및 아키텍처
  - `PROGRESS_REPORT.md` - 개발 타임라인 및 마일스톤
  - `COMPARISON_REPORT.md` - v1 vs v2 기능 비교

### 분석 문서
- `WEB_UI_*.md` - UI 개발 사양 및 디버깅 가이드
- `PROJECT_STRUCTURE_ANALYSIS.md` - 코드베이스 개요
- `IMPROVEMENTS_SUMMARY.md` - 기능 개선 요약
- `ANALYZE_ISSUE_REPORT.md` - 알려진 이슈 및 해결 방법

### 스크린샷
- `analysis-*.png` - UI 컴포넌트 분석 스크린샷
- `screenshot_*.png` - 기능 시연 스크린샷

## 🔒 보안 및 Gitignore 업데이트

**`.gitignore`에 추가됨:**
```gitignore
# ML 모델 (135MB - Git에 너무 큼)
**/models/*.keras
**/models/*.h5
**/models/*.pb
**/models/*.onnx
**/models/*.pth
**/models/*.pt
*.keras

# 테스트 샘플 (53MB)
test_samples/

# 백업 파일
*.backup
```

**사유:**
- Keras 모델 파일: 각 68MB (recognizer_dimensions_2.keras, recognizer_gdts.keras)
- 테스트 도면 샘플: 총 53MB
- Docker 빌드 중 GitHub에서 모델 다운로드
- 저장소 비대화 방지 및 빠른 CI/CD

## 🧪 테스트 및 검증

### 검증된 컴포넌트
- ✅ 레거시 파이프라인을 사용한 v1 OCR 처리
- ✅ ML 모델 및 GPU 가속을 사용한 v2 OCR
- ✅ 올바른 번호 레이블이 포함된 시각화 생성
- ✅ 이미지 확대 모달 기능
- ✅ PDF to PNG 변환 (150 DPI)
- ✅ list/dict 처리를 위한 타입 안정성
- ✅ Web UI 헬스 모니터링
- ✅ 다국어 지원 (eng, kor, jpn, chi_sim, nor)

### 성능 벤치마크
- v2 처리 시간: ~8-18초 (GPU 사용 시)
- 시각화 생성: <0.1초
- PDF 변환: 페이지당 ~1-2초
- 이미지 확대 모달: 즉시 (<100ms)

## 🔗 관련 이슈

이 커밋은 여러 요구 사항을 해결합니다:
1. OCR 결과를 위한 시각적 디버깅 인터페이스
2. v1(안정적) 및 v2(실험적) 파이프라인 모두 지원
3. JSON-to-이미지 매핑이 포함된 향상된 시각화
4. 스캔된 엔지니어링 도면을 위한 PDF 처리
5. 프로덕션 안정성을 위한 타입 안정성 개선

## 🚀 배포 참고사항

**사전 요구 사항:**
- CUDA 지원이 있는 NVIDIA GPU (v2용)
- nvidia-container-runtime이 있는 Docker
- Node.js 18+ (web-ui 개발용)
- Python 3.11+ (API 서버용)

**빠른 시작:**
```bash
# web-ui를 포함한 모든 서비스 시작
docker-compose up -d

# UI 접속
open http://localhost:5173

# 시각화를 사용한 v2 테스트
curl -X POST http://localhost:5002/api/v2/ocr \
  -F "file=@drawing.jpg" \
  -F "visualize=true"
```

**모델 다운로드 (v2):**
Docker 빌드 중 GitHub에서 모델이 자동으로 클론됩니다:
```dockerfile
RUN git clone https://github.com/javvi51/edocr2.git /app/edocr2
```

## 📊 통계

- 변경된 파일: 125개
- 추가된 라인: ~15,000+
- 새로운 기능: 주요 8개, 마이너 20+개
- 추가된 API 엔드포인트: 3개
- UI 컴포넌트: 15+개
- 문서 페이지: 12개

---

**Breaking Changes:** 없음 - 모든 변경 사항은 추가 기능

**마이그레이션 가이드:** 마이그레이션 필요 없음 - 새 기능은 선택적

🤖 Claude Code로 생성됨
